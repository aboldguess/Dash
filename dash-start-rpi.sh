#!/usr/bin/env bash

# Quick start script for running the Dash backend on Raspberry Pi or other Linux systems.
# Installs dependencies, ensures required secrets are present, builds the project and
# launches the server. Any autogenerated JWT secret is printed to the console for
# reference so the user can store it securely.
#
# Usage: ./dash-start-rpi.sh [-p PORT] [--prod]
#   -p, --port   Port for the server (default: 3000)
#       --prod   Run in production mode using npm start (default: development via npm run dev)
#   -h, --help   Show this help message

set -euo pipefail

LOG_FILE="dash_rpi_start.log"
# Redirect all output to console and log file for debugging
exec > >(tee -i "$LOG_FILE") 2>&1
# Inform the user where logs are stored for later inspection
echo "Logging output to $LOG_FILE"

PORT=3000
PROD=false
DB_URI="${DB_URI:-mongodb://localhost:27017/dash}"

usage() {
  echo "Usage: $0 [-p PORT] [--prod]"
  exit 1
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -p|--port)
      PORT="$2"
      shift 2
      ;;
    --prod|--production)
      PROD=true
      shift
      ;;
    -h|--help)
      usage
      ;;
    *)
      echo "Unknown option: $1"
      usage
      ;;
  esac
done

echo "Dash quick start script"
echo "========================"

# Check for Node.js and install if missing
if ! command -v node >/dev/null 2>&1; then
  echo "Node.js not found. Installing Node.js 18 (requires sudo)..."
  curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
  sudo apt-get install -y nodejs
fi

echo "Using Node.js version $(node -v)"

echo "Selected port: $PORT"
if $PROD; then
  echo "Server mode: production"
else
  echo "Server mode: development"
fi

# Move to backend directory relative to script location
cd "$(dirname "$0")/backend"

# Ensure an environment configuration exists so the backend knows how to
# reach MongoDB. If the user hasn't created one, fall back to the provided
# example file and use a sensible default `DB_URI`.
if [[ ! -f .env && -f .env.example ]]; then
  echo "No .env file found. Copying default .env.example..."
  cp .env.example .env
fi

# Ensure a JWT secret exists; generate one if missing and display it
if ! grep -q '^JWT_SECRET=' .env 2>/dev/null; then
  echo "No JWT_SECRET found. Generating a secure default..."
  secret=$(node -e "console.log(require('crypto').randomBytes(32).toString('base64'))")
  printf "\nJWT_SECRET=%s\n" "$secret" >> .env
  export JWT_SECRET="$secret"
  echo "Generated JWT_SECRET: $secret"
else
  export JWT_SECRET="$(grep '^JWT_SECRET=' .env | cut -d '=' -f2-)"
fi

export DB_URI
echo "Using database URI: $DB_URI"

# Attempt to start a MongoDB instance if one isn't already available on the
# default localhost port. This uses Docker when available so Raspberry Pi
# users don't need to manually install MongoDB.
if [[ "$DB_URI" == "mongodb://localhost:27017/dash" ]]; then
  if command -v nc >/dev/null 2>&1; then
    if ! nc -z localhost 27017 >/dev/null 2>&1; then
      echo "MongoDB not detected on localhost:27017. Attempting to launch Docker container..."
      if command -v docker >/dev/null 2>&1; then
        docker rm -f dash-mongo >/dev/null 2>&1 || true
        docker run -d --name dash-mongo -p 27017:27017 -v "$(pwd)/mongo-data:/data/db" mongo:6 >/dev/null 2>&1 || echo "Failed to start MongoDB via Docker"
        echo "Waiting for MongoDB to be ready..."
        for i in {1..10}; do
          if nc -z localhost 27017 >/dev/null 2>&1; then
            echo "MongoDB is up."
            break
          fi
          sleep 2
        done
      else
        echo "Docker not installed; please install MongoDB manually or set DB_URI to an external server."
      fi
    fi
  else
    echo "Warning: netcat (nc) not found. Unable to verify MongoDB status."
    echo "Attempting to start MongoDB via Docker..."
    if command -v docker >/dev/null 2>&1; then
      docker rm -f dash-mongo >/dev/null 2>&1 || true
      docker run -d --name dash-mongo -p 27017:27017 -v "$(pwd)/mongo-data:/data/db" mongo:6 >/dev/null 2>&1 || echo "Failed to start MongoDB via Docker"
      echo "Waiting briefly for MongoDB to start..."
      sleep 5
    else
      echo "Docker not installed; please install MongoDB manually or set DB_URI to an external server."
    fi
  fi
fi

echo "Installing npm dependencies..."
npm install

echo "Initialising database..."
npm run db:init || echo "Database initialisation failed. Check your DB connection settings."

echo "Building project..."
npm run build

export PORT="$PORT"

if $PROD; then
  export NODE_ENV=production
  echo "Starting Dash backend in production on port $PORT..."
  npm start
else
  echo "Starting Dash backend in development mode on port $PORT..."
  npm run dev
fi
